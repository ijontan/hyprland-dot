// ../../../../../usr/share/astal/gjs/gtk4/index.ts
import Astal6 from "gi://Astal?version=4.0";
import Gtk4 from "gi://Gtk?version=4.0";
import Gdk2 from "gi://Gdk?version=4.0";

// ../../../../../usr/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../../usr/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../../usr/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval2, callback) {
  return Astal.Time.interval(interval2, () => void callback?.());
}

// ../../../../../usr/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../usr/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec === "function") {
      this.pollFn = exec;
      delete this.pollExec;
    } else {
      this.pollExec = exec;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../../usr/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler = props[key];
      delete props[key];
      return [...acc, [sig, handler]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal, callback] of onHandlers) {
    const sig = signal.startsWith("notify") ? signal.replace("-", "::") : signal;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../../usr/share/astal/gjs/gtk4/astalify.ts
import Gtk from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";
var type = Symbol("child type");
var dummyBulder = new Gtk.Builder();
function _getChildren(widget) {
  if ("get_child" in widget && typeof widget.get_child == "function") {
    return widget.get_child() ? [widget.get_child()] : [];
  }
  const children = [];
  let ch = widget.get_first_child();
  while (ch !== null) {
    children.push(ch);
    ch = ch.get_next_sibling();
  }
  return children;
}
function _setChildren(widget, children) {
  children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
  for (const child of children) {
    widget.vfunc_add_child(
      dummyBulder,
      child,
      type in child ? child[type] : null
    );
  }
}
function astalify(cls, config = {}) {
  Object.assign(cls.prototype, {
    [setChildren](children) {
      const w = this;
      for (const child of config.getChildren?.(w) || _getChildren(w)) {
        if (child instanceof Gtk.Widget) {
          child.unparent();
          if (!children.includes(child) && noImplicitDestroy in this)
            child.run_dispose();
        }
      }
      if (config.setChildren) {
        config.setChildren(w, children);
      } else {
        _setChildren(w, children);
      }
    }
  });
  return {
    [cls.name]: (props = {}, ...children) => {
      const widget = new cls("cssName" in props ? { cssName: props.cssName } : {});
      if ("cssName" in props) {
        delete props.cssName;
      }
      if (props.noImplicitDestroy) {
        Object.assign(widget, { [noImplicitDestroy]: true });
        delete props.noImplicitDestroy;
      }
      if (props.type) {
        Object.assign(widget, { [type]: props.type });
        delete props.type;
      }
      if (children.length > 0) {
        Object.assign(props, { children });
      }
      return construct(widget, setupControllers(widget, props));
    }
  }[cls.name];
}
function setupControllers(widget, {
  onFocusEnter,
  onFocusLeave,
  onKeyPressed,
  onKeyReleased,
  onKeyModifier,
  onLegacy,
  onButtonPressed,
  onButtonReleased,
  onHoverEnter,
  onHoverLeave,
  onMotion,
  onScroll,
  onScrollDecelerate,
  ...props
}) {
  if (onFocusEnter || onFocusLeave) {
    const focus = new Gtk.EventControllerFocus();
    widget.add_controller(focus);
    if (onFocusEnter)
      focus.connect("enter", () => onFocusEnter(widget));
    if (onFocusLeave)
      focus.connect("leave", () => onFocusLeave(widget));
  }
  if (onKeyPressed || onKeyReleased || onKeyModifier) {
    const key = new Gtk.EventControllerKey();
    widget.add_controller(key);
    if (onKeyPressed)
      key.connect("key-pressed", (_, val, code, state) => onKeyPressed(widget, val, code, state));
    if (onKeyReleased)
      key.connect("key-released", (_, val, code, state) => onKeyReleased(widget, val, code, state));
    if (onKeyModifier)
      key.connect("modifiers", (_, state) => onKeyModifier(widget, state));
  }
  if (onLegacy || onButtonPressed || onButtonReleased) {
    const legacy = new Gtk.EventControllerLegacy();
    widget.add_controller(legacy);
    legacy.connect("event", (_, event) => {
      if (event.get_event_type() === Gdk.EventType.BUTTON_PRESS) {
        onButtonPressed?.(widget, event);
      }
      if (event.get_event_type() === Gdk.EventType.BUTTON_RELEASE) {
        onButtonReleased?.(widget, event);
      }
      onLegacy?.(widget, event);
    });
  }
  if (onMotion || onHoverEnter || onHoverLeave) {
    const hover = new Gtk.EventControllerMotion();
    widget.add_controller(hover);
    if (onHoverEnter)
      hover.connect("enter", (_, x, y) => onHoverEnter(widget, x, y));
    if (onHoverLeave)
      hover.connect("leave", () => onHoverLeave(widget));
    if (onMotion)
      hover.connect("motion", (_, x, y) => onMotion(widget, x, y));
  }
  if (onScroll || onScrollDecelerate) {
    const scroll = new Gtk.EventControllerScroll();
    scroll.flags = Gtk.EventControllerScrollFlags.BOTH_AXES | Gtk.EventControllerScrollFlags.KINETIC;
    widget.add_controller(scroll);
    if (onScroll)
      scroll.connect("scroll", (_, x, y) => onScroll(widget, x, y));
    if (onScrollDecelerate)
      scroll.connect("decelerate", (_, x, y) => onScrollDecelerate(widget, x, y));
  }
  return props;
}

// ../../../../../usr/share/astal/gjs/gtk4/app.ts
import GLib from "gi://GLib?version=2.0";
import Gtk2 from "gi://Gtk?version=4.0";
import Astal4 from "gi://Astal?version=4.0";

// ../../../../../usr/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps: Apps2, Application }) => {
  patch(Apps2.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris, Player }) => {
  patch(Mpris.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../usr/share/astal/gjs/gtk4/app.ts
Gtk2.init();
GLib.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var app_default = mkApp(Astal4.Application);

// ../../../../../usr/share/astal/gjs/gtk4/widget.ts
import Astal5 from "gi://Astal?version=4.0";
import Gtk3 from "gi://Gtk?version=4.0";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal5.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = astalify(Astal5.Box, {
  getChildren(self) {
    return self.get_children();
  },
  setChildren(self, children) {
    return self.set_children(filter(children));
  }
});
var Button = astalify(Gtk3.Button);
var CenterBox = astalify(Gtk3.CenterBox, {
  getChildren(box) {
    return [box.startWidget, box.centerWidget, box.endWidget];
  },
  setChildren(box, children) {
    const ch = filter(children);
    box.startWidget = ch[0] || new Gtk3.Box();
    box.centerWidget = ch[1] || new Gtk3.Box();
    box.endWidget = ch[2] || new Gtk3.Box();
  }
});
var Entry = astalify(Gtk3.Entry, {
  getChildren() {
    return [];
  }
});
var Image = astalify(Gtk3.Image, {
  getChildren() {
    return [];
  }
});
var Label = astalify(Gtk3.Label, {
  getChildren() {
    return [];
  },
  setChildren(self, children) {
    self.label = String(children);
  }
});
var LevelBar = astalify(Gtk3.LevelBar, {
  getChildren() {
    return [];
  }
});
var Overlay = astalify(Gtk3.Overlay, {
  getChildren(self) {
    const children = [];
    let ch = self.get_first_child();
    while (ch !== null) {
      children.push(ch);
      ch = ch.get_next_sibling();
    }
    return children.filter((ch2) => ch2 !== self.child);
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      const types = type in child ? child[type].split(/\s+/) : [];
      if (types.includes("overlay")) {
        self.add_overlay(child);
      } else {
        self.set_child(child);
      }
      self.set_measure_overlay(child, types.includes("measure"));
      self.set_clip_overlay(child, types.includes("clip"));
    }
  }
});
var Revealer = astalify(Gtk3.Revealer);
var Slider = astalify(Astal5.Slider, {
  getChildren() {
    return [];
  }
});
var Stack = astalify(Gtk3.Stack, {
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child.name != "" && child.name != null) {
        self.add_named(child, child.name);
      } else {
        self.add_child(child);
      }
    }
  }
});
var Switch = astalify(Gtk3.Switch, {
  getChildren() {
    return [];
  }
});
var Window = astalify(Astal5.Window);
var MenuButton = astalify(Gtk3.MenuButton, {
  getChildren(self) {
    return [self.popover, self.child];
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child instanceof Gtk3.Popover) {
        self.set_popover(child);
      } else {
        self.set_child(child);
      }
    }
  }
});
var Popover = astalify(Gtk3.Popover);

// sass:/home/itan/hyprland-dot/.config/ags/style.scss
var style_default = "window#launcher {\n  all: unset;\n  background-color: alpha(#0E0E10,0.5);\n}\nwindow#launcher box.Applauncher {\n  border-radius: 11px;\n  padding: 2rem;\n  color: #FEF9F8;\n}\nwindow#launcher box.Applauncher entry {\n  margin: 0rem 3.5rem 3.5rem 3.5rem;\n  padding: 1rem 2rem 1rem 2rem;\n  font-size: 1.5rem;\n  border-radius: 1rem;\n  background-color: alpha(#FEF9F8,0);\n  outline: none;\n  transition: background-color 250ms;\n}\nwindow#launcher box.Applauncher entry selection {\n  background-color: alpha(#FEF9F8,0.2);\n}\nwindow#launcher box.Applauncher entry placeholder {\n  transition: letter-spacing 250ms;\n}\nwindow#launcher box.Applauncher entry.focus:hover {\n  background-color: alpha(#FEF9F8,0.15);\n  outline: none;\n}\nwindow#launcher box.Applauncher entry.focus {\n  background-color: alpha(#FEF9F8,0.1);\n  outline: none;\n}\nwindow#launcher box.Applauncher entry.focus placeholder {\n  letter-spacing: 0.3rem;\n}\nwindow#launcher box.Applauncher button {\n  background-color: alpha(#FEF9F8,0);\n  padding: 1rem 3rem;\n  border-radius: 1rem;\n}\nwindow#launcher box.Applauncher button:focus:hover {\n  background-color: alpha(#FEF9F8,0.15);\n}\nwindow#launcher box.Applauncher button:hover {\n  background-color: alpha(#FEF9F8,0.15);\n}\nwindow#launcher box.Applauncher button:focus {\n  background-color: alpha(#FEF9F8,0.1);\n  outline: none;\n}\nwindow#launcher box.Applauncher button image {\n  -gtk-icon-size: 5em;\n  padding-bottom: 0.5em;\n}\nwindow#launcher box.Applauncher button label.name {\n  font-size: 1em;\n  transition: letter-spacing 400ms;\n}\nwindow#launcher box.Applauncher button:focus label.name {\n  letter-spacing: 0.3rem;\n}\nwindow#launcher box.Applauncher button:hover label.name {\n  letter-spacing: 0.3rem;\n}\nwindow#launcher box.Applauncher button label.description {\n  color: alpha(#FEF9F8,0.8);\n}\nwindow#launcher box.Applauncher box.not-found {\n  padding: 1rem;\n}\nwindow#launcher box.Applauncher box.not-found image {\n  font-size: 6em;\n  color: alpha(#FEF9F8,0.7);\n}\nwindow#launcher box.Applauncher box.not-found label {\n  color: alpha(#FEF9F8,0.9);\n  font-size: 1.2em;\n}\n\nwindow#wallpaperPicker {\n  all: unset;\n  background-color: alpha(#0E0E10,0.5);\n}\nwindow#wallpaperPicker box.wallpaperPicker {\n  border-radius: 11px;\n  padding: 2rem;\n  color: #FEF9F8;\n}\nwindow#wallpaperPicker box.wallpaperPicker entry {\n  margin: 0rem 3.5rem 3.5rem 3.5rem;\n  padding: 1rem 2rem 1rem 2rem;\n  font-size: 1.5rem;\n  border-radius: 1rem;\n  background-color: alpha(#FEF9F8,0);\n  outline: none;\n  transition: background-color 250ms;\n}\nwindow#wallpaperPicker box.wallpaperPicker entry selection {\n  background-color: alpha(#FEF9F8,0.2);\n}\nwindow#wallpaperPicker box.wallpaperPicker entry placeholder {\n  transition: letter-spacing 250ms;\n}\nwindow#wallpaperPicker box.wallpaperPicker entry.focus:hover {\n  background-color: alpha(#FEF9F8,0.15);\n  outline: none;\n}\nwindow#wallpaperPicker box.wallpaperPicker entry.focus {\n  background-color: alpha(#FEF9F8,0.1);\n  outline: none;\n}\nwindow#wallpaperPicker box.wallpaperPicker entry.focus placeholder {\n  letter-spacing: 0.3rem;\n}\nwindow#wallpaperPicker box.wallpaperPicker button {\n  background-color: alpha(#FEF9F8,0);\n  padding: 1rem;\n  border-radius: 1rem;\n}\nwindow#wallpaperPicker box.wallpaperPicker button:focus:hover {\n  background-color: alpha(#FEF9F8,0.15);\n}\nwindow#wallpaperPicker box.wallpaperPicker button:hover {\n  background-color: alpha(#FEF9F8,0.15);\n}\nwindow#wallpaperPicker box.wallpaperPicker button:focus {\n  background-color: alpha(#FEF9F8,0.1);\n  outline: none;\n}\nwindow#wallpaperPicker box.wallpaperPicker button picture {\n  border-radius: 1em;\n  box-shadow: 0.5em 0.5em 3em alpha(#0E0E10,0.9);\n  margin-bottom: 1em;\n}\nwindow#wallpaperPicker box.wallpaperPicker button label.name {\n  font-size: 1em;\n  transition: letter-spacing 400ms;\n}\nwindow#wallpaperPicker box.wallpaperPicker button:focus label.name {\n  letter-spacing: 0.3rem;\n}\nwindow#wallpaperPicker box.wallpaperPicker button:hover label.name {\n  letter-spacing: 0.3rem;\n}\nwindow#wallpaperPicker box.wallpaperPicker button label.description {\n  color: alpha(#FEF9F8,0.8);\n}\nwindow#wallpaperPicker box.wallpaperPicker box.not-found {\n  padding: 1rem;\n}\nwindow#wallpaperPicker box.wallpaperPicker box.not-found image {\n  font-size: 6em;\n  color: alpha(#FEF9F8,0.7);\n}\nwindow#wallpaperPicker box.wallpaperPicker box.not-found label {\n  color: alpha(#FEF9F8,0.9);\n  font-size: 1.2em;\n}\n\nwindow.Bar {\n  background: transparent;\n  color: @theme_fg_color;\n  font-weight: bold;\n}\nwindow.Bar > centerbox {\n  background: @theme_bg_color;\n  border-radius: 10px;\n  margin: 8px;\n}\nwindow.Bar button {\n  border-radius: 8px;\n  margin: 2px;\n}";

// widget/AppLauncher.tsx
import Apps from "gi://AstalApps";

// ../../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../../usr/share/astal/gjs/file.ts
import Astal7 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";

// ../../../../../usr/share/astal/gjs/gobject.ts
import GObject2 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject2;

// ../../../../../usr/share/astal/gjs/gtk4/jsx-runtime.ts
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  // circularprogress: Widget.CircularProgress,
  // drawingarea: Widget.DrawingArea,
  entry: Entry,
  image: Image,
  label: Label,
  levelbar: LevelBar,
  overlay: Overlay,
  revealer: Revealer,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window,
  menubutton: MenuButton,
  popover: Popover
};
var jsxs = jsx2;

// widget/components/Paginate.tsx
function Paginate({
  columns,
  rows,
  initialPage = 0,
  hspacing,
  vspacing,
  datas,
  buildFunction
}) {
  const currentPage = Variable.derive(
    [datas],
    () => initialPage
  );
  const noOfItemInPage = columns * rows;
  const lastPage = datas.as((datas2) => datas2.length / noOfItemInPage);
  const items = Variable.derive(
    [currentPage, datas],
    (currentPage2, datas2) => {
      return datas2.slice(noOfItemInPage * currentPage2, noOfItemInPage * (currentPage2 + 1));
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      spacing: vspacing,
      vertical: true,
      homogeneous: true,
      onKeyPressed: (_self, keyval) => {
        const current = currentPage.get();
        if (keyval === Gdk2.KEY_h && current > 0) currentPage.set(current - 1);
        if (keyval === Gdk2.KEY_l && current < lastPage.get() - 1) currentPage.set(current + 1);
      },
      children: items((items2) => {
        const ret = [];
        for (let i = 0; i < rows; i++) {
          const row = [];
          for (let j = 0; j < columns; j++) {
            const data = items2.at(i * columns + j);
            if (data)
              row.push(buildFunction(data));
            else
              row.push(/* @__PURE__ */ jsx2("box", { cssClasses: ["empty"] }));
          }
          ret.push(
            /* @__PURE__ */ jsx2("box", { spacing: hspacing, homogeneous: true, children: row })
          );
        }
        return ret;
      })
    }
  );
}

// widget/AppLauncher.tsx
var NAME = "launcher";
var COLUMNS = 4;
var ROWS = 5;
var HOME = default2.getenv("HOME");
var PRIORITY_MAP_DIR_PATH = `${HOME}/.cache/ags`;
var PRIORITY_MAP_PATH = `${PRIORITY_MAP_DIR_PATH}/app_priority_map.json`;
function hide() {
  app_default.get_window(NAME).hide();
}
var appPriorityMap = {};
function updatePriorityMap(name) {
  if (appPriorityMap[name]) {
    appPriorityMap[name] += 1;
  } else {
    appPriorityMap[name] = 1;
  }
  const data = JSON.stringify(appPriorityMap, null, "	");
  default2.file_set_contents(PRIORITY_MAP_PATH, data);
}
function sortWithPriority(a, b) {
  const aRank = appPriorityMap[a.name];
  const bRank = appPriorityMap[b.name];
  let ret = 0;
  if (!aRank) ret = bRank;
  else if (!bRank) ret = -aRank;
  else if (aRank && bRank) ret = bRank - aRank;
  if (ret === 0) ret = a.name.localeCompare(b.name);
  return ret;
}
function AppButton({ app }) {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      cssClasses: ["AppButton"],
      canShrink: true,
      onClicked: () => {
        hide();
        app.launch();
        updatePriorityMap(app.name);
      },
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2("image", { iconName: app.iconName || "missing_symbolic" }),
        /* @__PURE__ */ jsx2(
          "label",
          {
            cssClasses: ["name"],
            ellipsize: 3,
            label: app.name,
            maxWidthChars: 15
          }
        )
      ] })
    }
  );
}
function Applauncher() {
  const { CENTER } = Gtk4.Align;
  const apps = new Apps.Apps();
  let entry;
  function setupEntry(widget) {
    entry = widget;
  }
  const text = Variable("");
  let list = text((text2) => apps.fuzzy_query(text2).sort(sortWithPriority));
  const onEnter = () => {
    const app = apps.fuzzy_query(text.get())?.sort(sortWithPriority)[0];
    app.launch();
    updatePriorityMap(app.name);
    hide();
  };
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: NAME,
      namespace: NAME,
      anchor: Astal6.WindowAnchor.TOP | Astal6.WindowAnchor.BOTTOM | Astal6.WindowAnchor.LEFT | Astal6.WindowAnchor.RIGHT,
      exclusivity: Astal6.Exclusivity.IGNORE,
      keymode: Astal6.Keymode.EXCLUSIVE,
      application: app_default,
      onShow: (_self) => {
        try {
          let [opened, contents] = default2.file_get_contents(PRIORITY_MAP_PATH);
          if (opened) {
            appPriorityMap = JSON.parse(contents.toString());
          }
        } catch (e) {
          appPriorityMap = {};
          console.log("ERROR | not open");
          const data = JSON.stringify(appPriorityMap, null, "	");
          default2.mkdir(PRIORITY_MAP_DIR_PATH, 493);
          default2.creat(PRIORITY_MAP_PATH, 420);
          default2.file_set_contents(PRIORITY_MAP_PATH, data);
        }
        text.set(" ");
        text.set("");
        entry.text = "";
      },
      onKeyPressed: (_self, keyval) => {
        if (keyval === Gdk2.KEY_Escape) {
          hide();
        }
        if (keyval === Gdk2.KEY_i || keyval === Gdk2.KEY_f || keyval === Gdk2.KEY_a) {
          entry.grab_focus();
        }
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx2("box", { hexpand: true }),
        /* @__PURE__ */ jsxs("box", { vertical: true, children: [
          /* @__PURE__ */ jsx2("box", { vexpand: true }),
          /* @__PURE__ */ jsxs("box", { widthRequest: 1100, heightRequest: 880, cssClasses: ["Applauncher"], vertical: true, children: [
            /* @__PURE__ */ jsx2(
              "entry",
              {
                setup: setupEntry,
                placeholderText: "Search",
                onFocusEnter: (self) => {
                  self.get_style_context().add_class("focus");
                },
                onFocusLeave: (self) => {
                  self.get_style_context().remove_class("focus");
                },
                onChanged: (self) => text.set(self.text),
                onActivate: onEnter
              }
            ),
            /* @__PURE__ */ jsx2(
              Paginate,
              {
                columns: COLUMNS,
                rows: ROWS,
                hspacing: 20,
                vspacing: 5,
                datas: list,
                buildFunction: (app) => /* @__PURE__ */ jsx2(AppButton, { app })
              }
            ),
            /* @__PURE__ */ jsxs(
              "box",
              {
                halign: CENTER,
                cssClasses: ["not-found"],
                vertical: true,
                visible: list.as((l) => l.length === 0),
                children: [
                  /* @__PURE__ */ jsx2("image", { iconName: "system-search-symbolic" }),
                  /* @__PURE__ */ jsx2("label", { label: "No match found" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsx2("box", { vexpand: true })
        ] }),
        /* @__PURE__ */ jsx2("box", { hexpand: true })
      ] })
    }
  );
}

// utils/fuzzySearch.ts
function fuzzySearch(needle, haystack) {
  const hlen = haystack.length;
  const nlen = needle.length;
  if (nlen > hlen) {
    return false;
  }
  if (nlen === hlen) {
    return needle === haystack;
  }
  outer: for (var i = 0, j = 0; i < nlen; i++) {
    var nch = needle.charCodeAt(i);
    while (j < hlen) {
      if (haystack.charCodeAt(j++) === nch) {
        continue outer;
      }
    }
    return false;
  }
  return true;
}

// widget/components/Picture.tsx
var Picture = astalify(Gtk4.Picture, {
  // if it is a container widget, define children setter and getter here
  getChildren(self) {
    return [];
  }
});

// widget/WallpaperPicker.tsx
var NAME2 = "wallpaperPicker";
var COLUMNS2 = 5;
var ROWS2 = 1;
var HOME2 = default2.getenv("HOME");
var WALLPAPER_PATH = `${HOME2}/Pictures/wallpapers`;
var CHANGE_WALLPAPER_COMMAND = `${HOME2}/.config/hypr/UserScripts/WallpaperChange.sh`;
var SUPPORTED_IMAGE_FORMAT = {
  png: true,
  PNG: true,
  jpg: true,
  JPG: true,
  jepg: true,
  JEPG: true,
  gif: true,
  GIF: true,
  SVG: true,
  svg: true
};
function hide2() {
  app_default.get_window(NAME2).hide();
}
function WallpaperButton({ wallpaper }) {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      cssClasses: ["WallpaperButton"],
      canShrink: true,
      onClicked: () => {
        hide2();
        execAsync(`${CHANGE_WALLPAPER_COMMAND} ${wallpaper.path}`).then((ret) => console.log("WALLPAPER | log: ", ret)).catch(() => console.log("WALLPAPER | failed to change wallpaper: ", wallpaper.path));
      },
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2("box", { height_request: 250, baselinePosition: Gtk4.BaselinePosition.CENTER, vertical: true, children: /* @__PURE__ */ jsx2(Picture, { file: wallpaper.file, height_request: 180, canShrink: true, cssClasses: ["image"] }) }),
        /* @__PURE__ */ jsx2(
          "label",
          {
            cssClasses: ["name"],
            ellipsize: 3,
            label: wallpaper.name,
            maxWidthChars: 15
          }
        )
      ] })
    }
  );
}
function WallpaperPicker() {
  const wallpapers = [];
  const wallpaperDir = default2.Dir.open(WALLPAPER_PATH, 0);
  for (let file = wallpaperDir.read_name(); file != null; file = wallpaperDir.read_name()) {
    const fileNameToken = file.split(".");
    const extension = fileNameToken[fileNameToken.length - 1];
    console.log("TEST | file: ", file);
    if (SUPPORTED_IMAGE_FORMAT[extension] == void 0) continue;
    const path = `${WALLPAPER_PATH}/${file}`;
    const wallpaper = {
      name: fileNameToken[0],
      path,
      file: Gio.file_new_for_path(path)
    };
    wallpapers.push(wallpaper);
  }
  const text = Variable("");
  let filteredWallpapers = text((text2) => wallpapers.filter((wp) => fuzzySearch(text2, wp.name) || text2.length == 0));
  let entry;
  function setupEntry(widget) {
    entry = widget;
  }
  const onEnter = () => {
    hide2();
  };
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: NAME2,
      namespace: NAME2,
      anchor: Astal6.WindowAnchor.TOP | Astal6.WindowAnchor.BOTTOM | Astal6.WindowAnchor.LEFT | Astal6.WindowAnchor.RIGHT,
      exclusivity: Astal6.Exclusivity.IGNORE,
      keymode: Astal6.Keymode.ON_DEMAND,
      application: app_default,
      onShow: () => {
        entry.text = "";
        text.set("");
      },
      onKeyPressed: (_self, keyval) => {
        if (keyval == Gdk2.KEY_Escape) {
          hide2();
        }
        if (keyval === Gdk2.KEY_i || keyval === Gdk2.KEY_f || keyval === Gdk2.KEY_a) {
          entry.grab_focus();
        }
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx2("box", { hexpand: true }),
        /* @__PURE__ */ jsxs("box", { vertical: true, children: [
          /* @__PURE__ */ jsx2("box", { vexpand: true }),
          /* @__PURE__ */ jsxs("box", { cssClasses: ["wallpaperPicker"], vertical: true, children: [
            /* @__PURE__ */ jsx2(
              "entry",
              {
                setup: setupEntry,
                placeholderText: "Search",
                onFocusEnter: (self) => {
                  self.get_style_context().add_class("focus");
                },
                onFocusLeave: (self) => {
                  self.get_style_context().remove_class("focus");
                },
                onChanged: (self) => text.set(self.text),
                onActivate: onEnter
              }
            ),
            /* @__PURE__ */ jsx2(
              Paginate,
              {
                columns: COLUMNS2,
                rows: ROWS2,
                hspacing: 5,
                vspacing: 5,
                datas: filteredWallpapers,
                buildFunction: (wallpaper) => /* @__PURE__ */ jsx2(WallpaperButton, { wallpaper })
              }
            )
          ] }),
          /* @__PURE__ */ jsx2("box", { vexpand: true })
        ] }),
        /* @__PURE__ */ jsx2("box", { hexpand: true })
      ] })
    }
  );
}

// app.ts
app_default.start({
  css: style_default,
  main() {
    Applauncher();
    WallpaperPicker();
  }
});
//# sourceMappingURL=data:application/json;base64,
